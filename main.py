# -*- coding: utf-8 -*-

# ---- Core Python Imports ----
import os
import io
import re
import requests
import sqlite3
from threading import Thread

# --- Third-party Library Imports ---
from PIL import Image, ImageDraw, ImageFont
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors import UserNotParticipant, MessageNotModified
from flask import Flask
from dotenv import load_dotenv

# ---- 1. CONFIGURATION AND SETUP ----
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")
FORCE_SUB_CHANNEL = os.getenv("FORCE_SUB_CHANNEL")
INVITE_LINK = os.getenv("INVITE_LINK")

# ---- ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж▓рж┐ржВржХ ржПржЦрж╛ржирзЗ ржпрзБржХрзНржд ржХрж░рзБржи ----
JOIN_CHANNEL_TEXT = "ЁЯОм рж╕ржХрж▓ ржорзБржнрж┐ ржПржмржВ рж╕рж┐рж░рж┐ржЬрзЗрж░ ржЖржкржбрзЗржЯ ржкрзЗрждрзЗ"
JOIN_CHANNEL_LINK = "https://t.me/+60goZWp-FpkxNzVl" # ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж▓рж┐ржВржХ ржжрж┐ржи


# ---- Database Setup ----
DB_FILE = "bot_settings.db"
def db_query(query, params=(), fetch=None):
    with sqlite3.connect(DB_FILE, check_same_thread=False) as conn:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()
        if fetch == 'one': return cursor.fetchone()
        if fetch == 'all': return cursor.fetchall()

db_query('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, watermark_text TEXT, channel_id TEXT)')

# ---- Global Variables & Bot Initialization ----
user_conversations = {}
bot = Client("UltimateMovieBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ---- Flask App (for Keep-Alive on Render/Koyeb) ----
app = Flask(__name__)
@app.route('/')
def home(): return "тЬЕ Bot is Running!"
Thread(target=lambda: app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080))), daemon=True).start()

# ---- 2. DECORATORS AND HELPER FUNCTIONS ----
def force_subscribe(func):
    async def wrapper(client, message):
        if FORCE_SUB_CHANNEL:
            try:
                chat_id = int(FORCE_SUB_CHANNEL) if FORCE_SUB_CHANNEL.startswith("-100") else FORCE_SUB_CHANNEL
                await client.get_chat_member(chat_id, message.from_user.id)
            except UserNotParticipant:
                join_link = INVITE_LINK or f"https://t.me/{FORCE_SUB_CHANNEL.replace('@', '')}"
                return await message.reply_text("тЭЧ **ржПржЗ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯСЙ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи", url=join_link)]]))
        await func(client, message)
    return wrapper

def format_runtime(minutes: int):
    if not minutes or not isinstance(minutes, int): return "N/A"
    hours, mins = divmod(minutes, 60)
    return f"{hours}h {mins}m" if hours > 0 else f"{mins}m"


# ---- 3. TMDB API & CONTENT GENERATION ----
def search_tmdb(query: str):
    year, name = None, query.strip()
    match = re.search(r'(.+?)\s*\(?(\d{4})\)?$', query)
    if match: name, year = match.group(1).strip(), match.group(2)
    url = f"https://api.themoviedb.org/3/search/multi?api_key={TMDB_API_KEY}&query={name}" + (f"&year={year}" if year else "")
    try:
        r = requests.get(url, timeout=10); r.raise_for_status()
        return [res for res in r.json().get("results", []) if res.get("media_type") in ["movie", "tv"]][:5]
    except Exception as e:
        print(f"TMDB Search Error: {e}"); return []

def get_tmdb_details(media_type: str, media_id: int):
    url = f"https://api.themoviedb.org/3/{media_type}/{media_id}?api_key={TMDB_API_KEY}&append_to_response=credits,videos"
    try:
        r = requests.get(url, timeout=10); r.raise_for_status(); return r.json()
    except Exception as e:
        print(f"TMDB Details Error: {e}"); return None

def watermark_poster(poster_url: str, watermark_text: str):
    if not poster_url: return None, "Poster URL not found."
    try:
        img_data = requests.get(poster_url, timeout=20).content
        img = Image.open(io.BytesIO(img_data)).convert("RGBA")
        if watermark_text:
            draw = ImageDraw.Draw(img)
            try: font = ImageFont.truetype("Poppins-Bold.ttf", 25)
            except IOError: font = ImageFont.load_default()
            bbox = draw.textbbox((0, 0), watermark_text, font=font)
            text_width, text_height = bbox[2] - bbox[0], bbox[3] - bbox[1]
            x, y = img.width - text_width - 20, img.height - text_height - 20
            draw.text((x+1, y+1), watermark_text, font=font, fill=(0, 0, 0, 128))
            draw.text((x, y), watermark_text, font=font, fill=(255, 255, 255, 220))
        buffer = io.BytesIO(); buffer.name = "poster.png"
        img.save(buffer, "PNG"); buffer.seek(0)
        return buffer, None
    except requests.exceptions.RequestException as e: return None, f"Network Error: {e}"
    except Exception as e: return None, f"Image processing error. Is 'Poppins-Bold.ttf' missing? Error: {e}"

def generate_channel_caption(data: dict, language: str, links: dict):
    title = data.get("title") or data.get("name") or "N/A"
    year = (data.get("release_date") or data.get("first_air_date") or "----")[:4]
    genres = ", ".join([g["name"] for g in data.get("genres", [])[:3]]) or "N/A"
    rating = f"{data.get('vote_average', 0):.1f}/10"
    runtime_min = data.get("runtime") or (data.get("episode_run_time", [0])[0])
    runtime = format_runtime(runtime_min)
    overview = data.get("overview", "ржХрж╛рж╣рж┐ржирзА рж╕ржВржХрзНрж╖рзЗржк ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    if len(overview) > 250: overview = overview[:250] + "..."
    cast = ", ".join([a['name'] for a in data.get('credits', {}).get('cast', [])[:3]]) or "N/A"

    caption = (f"ЁЯОм **{title} ({year})**\n\n"
               f"тнРя╕П **рж░рзЗржЯрж┐ржВ:** {rating}\nЁЯОн **ржзрж░ржи:** {genres}\n"
               f"ЁЯФК **ржнрж╛рж╖рж╛:** {language}\nтП░ **рж░рж╛ржиржЯрж╛ржЗржо:** {runtime}\n"
               f"ЁЯСе **ржЕржнрж┐ржирзЯрзЗ:** {cast}\n\nЁЯУЭ **ржХрж╛рж╣рж┐ржирзА рж╕ржВржХрзНрж╖рзЗржк:** {overview}\n\n"
               "ЁЯУе **ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХ** ЁЯСЗ\n")
    if links.get("480p"): caption += f"ЁЯФ╣ **480p:** [ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи]({links['480p']})\n"
    if links.get("720p"): caption += f"ЁЯФ╣ **720p:** [ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи]({links['720p']})\n"
    if links.get("1080p"): caption += f"ЁЯФ╣ **1080p:** [ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи]({links['1080p']})\n"
    if JOIN_CHANNEL_TEXT and JOIN_CHANNEL_LINK:
        caption += f"\n---\n**ржЖржорж╛ржжрзЗрж░ ржЕржирзНржп ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи ЁЯСЗ**\n[ЁЯСЙ {JOIN_CHANNEL_TEXT}]({JOIN_CHANNEL_LINK})"
    return caption

# ---- 4. BOT HANDLERS ----
@bot.on_message(filters.command("start") & filters.private)
@force_subscribe
async def start_cmd(client, message: Message):
    db_query("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.from_user.id,))
    await message.reply_text(
        "ЁЯСЛ **рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржорзБржнрж┐ ржкрзЛрж╕рзНржЯрж╛рж░ ржмржЯред**\n\n"
        "**ржЖржорж╛рж░ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ рж╣рж▓рзЛ:**\n"
        "ЁЯФ╣ `/post <name>` - ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржкрзЛрж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рзБржиред\n"
        "ЁЯФ╣ `/quickpost <name>` - ржжрзНрж░рзБржд ржПржХржЯрж┐ ржкрзЛрж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рзБржиред\n"
        "ЁЯФ╣ `/testpost` - ржЪрзНржпрж╛ржирзЗрж▓ рж╕ржВржпрзЛржЧ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред\n\n"
        "**рж╕рзЗржЯрж┐ржВрж╕:**\n"
        "ЁЯФ╣ `/setchannel <ID>` - ржкрзЛрж╕рзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржиред\n"
        "ЁЯФ╣ `/setwatermark <text>` - ржкрзЛрж╕рзНржЯрж╛рж░рзЗ ржЖржкржирж╛рж░ ржУрзЯрж╛ржЯрж╛рж░ржорж╛рж░рзНржХ рж╕рзЗржЯ ржХрж░рзБржиред\n"
        "ЁЯФ╣ `/cancel` - ржпрзЗржХрзЛржирзЛ ржЪрж▓ржорж╛ржи ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рзБржиред",
        parse_mode=enums.ParseMode.MARKDOWN
    )

# ... (ржЕржирзНржпрж╛ржирзНржп ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЗржоржи ржЖржЫрзЗ рждрзЗржоржиржЗ ржерж╛ржХржмрзЗ) ...
@bot.on_message(filters.command(["post", "blogger"]) & filters.private)
@force_subscribe
async def search_commands(client, message: Message):
    command = message.command[0].lower()
    if len(message.command) == 1:
        return await message.reply_text(f"**ржмрзНржпржмрж╣рж╛рж░:** `/{command} Movie Name`", parse_mode=enums.ParseMode.MARKDOWN)
    
    query = " ".join(message.command[1:])
    processing_msg = await message.reply_text(f"ЁЯФН `{query}`-ржПрж░ ржЬржирзНржп ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...", parse_mode=enums.ParseMode.MARKDOWN)
    results = search_tmdb(query)
    if not results:
        return await processing_msg.edit_text("тЭМ ржХрзЛржирзЛ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    
    buttons = [[InlineKeyboardButton(
        f"{'ЁЯОм' if r['media_type'] == 'movie' else 'ЁЯУ║'} {r.get('title') or r.get('name')} ({(r.get('release_date') or r.get('first_air_date') or '----').split('-')[0]})",
        callback_data=f"select_{command}_{r['media_type']}_{r['id']}"
    )] for r in results]
    await processing_msg.edit_text("**ЁЯСЗ ржлрж▓рж╛ржлрж▓ ржерзЗржХрзЗ ржмрзЗржЫрзЗ ржирж┐ржи:**", reply_markup=InlineKeyboardMarkup(buttons))

@bot.on_message(filters.command("quickpost") & filters.private)
@force_subscribe
async def quick_post_search(client, message: Message):
    if len(message.command) == 1:
        return await message.reply_text("**ржмрзНржпржмрж╣рж╛рж░:** `/quickpost Movie Name`", parse_mode=enums.ParseMode.MARKDOWN)

    user_settings = db_query("SELECT channel_id FROM users WHERE user_id = ?", (message.from_user.id,), 'one')
    if not user_settings or not user_settings[0]:
        return await message.reply_text("тЪая╕П ржжрзНрж░рзБржд ржкрзЛрж╕рзНржЯрзЗрж░ ржЬржирзНржп ржкрзНрж░ржержорзЗ ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржиред\nржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: `/setchannel <channel_id>`")

    query = " ".join(message.command[1:])
    processing_msg = await message.reply_text(f"ЁЯФН `{query}`-ржПрж░ ржЬржирзНржп ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...", parse_mode=enums.ParseMode.MARKDOWN)
    results = search_tmdb(query)
    if not results:
        return await processing_msg.edit_text("тЭМ ржХрзЛржирзЛ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

    buttons = [[InlineKeyboardButton(
        f"{'ЁЯОм' if r['media_type'] == 'movie' else 'ЁЯУ║'} {r.get('title') or r.get('name')} ({(r.get('release_date') or r.get('first_air_date') or '----').split('-')[0]})",
        callback_data=f"qpost_{r['media_type']}_{r['id']}"
    )] for r in results]
    await processing_msg.edit_text("**ЁЯСЗ ржжрзНрж░рзБржд ржкрзЛрж╕рзНржЯрзЗрж░ ржЬржирзНржп ржмрзЗржЫрзЗ ржирж┐ржи:**", reply_markup=InlineKeyboardMarkup(buttons))

@bot.on_callback_query(filters.regex("^qpost_"))
async def quick_post_select(client, cb: Message):
    await cb.message.edit("тП│ ржкрзЛрж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    try: _, media_type, media_id = cb.data.split("_", 2); media_id = int(media_id)
    except: return await cb.message.edit("тЭМ ржЕржмрзИржз ржЕржирзБрж░рзЛржзред")

    details = get_tmdb_details(media_type, media_id)
    if not details: return await cb.message.edit("тЭМ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

    user_settings = db_query("SELECT channel_id, watermark_text FROM users WHERE user_id = ?", (cb.from_user.id,), 'one')
    channel_id, watermark_text = user_settings

    title = details.get("title") or details.get("name")
    year = (details.get("release_date") or details.get("first_air_date") or "----")[:4]
    rating = f"{details.get('vote_average', 0):.1f}/10"
    caption = f"ЁЯОм **{title} ({year})**\nтнРя╕П **рж░рзЗржЯрж┐ржВ:** {rating}"
    if JOIN_CHANNEL_TEXT and JOIN_CHANNEL_LINK:
        caption += f"\n\n[ЁЯСЙ {JOIN_CHANNEL_TEXT}]({JOIN_CHANNEL_LINK})"

    poster_url = f"https://image.tmdb.org/t/p/w500{details['poster_path']}" if details.get('poster_path') else None
    poster, error = watermark_poster(poster_url, watermark_text)
    
    if error: await client.send_message(cb.from_user.id, f"тЪая╕П **ржкрзЛрж╕рзНржЯрж╛рж░ рждрзИрж░рж┐рждрзЗ рж╕ржорж╕рзНржпрж╛:** `{error}`")

    try:
        if poster: poster.seek(0); await client.send_photo(int(channel_id), photo=poster, caption=caption, parse_mode=enums.ParseMode.MARKDOWN)
        else: await client.send_message(int(channel_id), caption, parse_mode=enums.ParseMode.MARKDOWN)
        await cb.message.edit(f"тЬЕ **'{title}'** рж╕ржлрж▓ржнрж╛ржмрзЗ `{channel_id}`-ржП ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!")
    except Exception as e: await cb.message.edit(f"тЭМ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред\n**рждрзНрж░рзБржЯрж┐:** `{e}`")


@bot.on_callback_query(filters.regex("^select_"))
async def selection_cb(client, cb: Message):
    await cb.answer("Fetching details...")
    try: _, flow, media_type, mid = cb.data.split("_", 3)
    except: return await cb.message.edit_text("Invalid callback.")
    details = get_tmdb_details(media_type, int(mid))
    if not details: return await cb.message.edit_text("тЭМ Failed to get details.")
    uid = cb.from_user.id
    user_conversations[uid] = {"flow": flow, "details": details, "links": [], "fixed_links": {}, "state": ""}
    if flow == "blogger": await cb.message.edit("Blogger flow not implemented.")
    elif flow == "post":
        user_conversations[uid]["state"] = "wait_channel_lang"
        await cb.message.edit_text("**ржЪрзНржпрж╛ржирзЗрж▓ ржкрзЛрж╕рзНржЯ:** ржкрзЛрж╕рзНржЯрзЗрж░ ржЬржирзНржп ржнрж╛рж╖рж╛ рж▓рж┐ржЦрзБржиред (ржпрзЗржоржи: ржмрж╛ржВрж▓рж╛, ржЗржВрж░рзЗржЬрж┐)")


@bot.on_message(filters.text & filters.private & ~filters.command(["start", "post", "blogger", "quickpost", "setwatermark", "setchannel", "cancel", "testpost"]))
@force_subscribe
async def conversation_handler(client, message: Message):
    uid, convo = message.from_user.id, user_conversations.get(message.from_user.id)
    if not convo or "state" not in convo: return
    state, text = convo["state"], message.text.strip()
    if state == "wait_channel_lang":
        convo["language"] = text; convo["state"] = "wait_480p"
        await message.reply_text("тЬЕ ржнрж╛рж╖рж╛ рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗред ржПржЦржи **480p** рж▓рж┐ржВржХ ржкрж╛ржарж╛ржи ржЕржержмрж╛ `skip` рж▓рж┐ржЦрзБржиред")
    elif state == "wait_480p":
        if text.lower() != 'skip': convo["fixed_links"]["480p"] = text
        convo["state"] = "wait_720p"
        await message.reply_text("тЬЕ ржарж┐ржХ ржЖржЫрзЗред ржПржЦржи **720p** рж▓рж┐ржВржХ ржкрж╛ржарж╛ржи ржЕржержмрж╛ `skip` рж▓рж┐ржЦрзБржиред")
    elif state == "wait_720p":
        if text.lower() != 'skip': convo["fixed_links"]["720p"] = text
        convo["state"] = "wait_1080p"
        await message.reply_text("тЬЕ ржУржХрзЗред ржПржЦржи **1080p** рж▓рж┐ржВржХ ржкрж╛ржарж╛ржи ржЕржержмрж╛ `skip` рж▓рж┐ржЦрзБржиред")
    elif state == "wait_1080p":
        if text.lower() != 'skip': convo["fixed_links"]["1080p"] = text
        msg = await message.reply_text("тЬЕ рждржерзНржп рж╕ржВржЧрзНрж░рж╣ рж╕ржорзНржкржирзНржи! ржЪрзНржпрж╛ржирзЗрж▓ ржкрзЛрж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
        await generate_final_post_preview(client, uid, message.chat.id, msg)

async def generate_final_post_preview(client, uid, cid, msg):
    convo = user_conversations.get(uid)
    if not convo: return
    caption = generate_channel_caption(convo["details"], convo["language"], convo["fixed_links"])
    watermark_data = db_query("SELECT watermark_text FROM users WHERE user_id=?", (uid,), 'one')
    watermark = watermark_data[0] if watermark_data else None
    poster_url = f"https://image.tmdb.org/t/p/w500{convo['details']['poster_path']}" if convo['details'].get('poster_path') else None
    poster, error = watermark_poster(poster_url, watermark)
    await msg.delete()
    if error: await client.send_message(cid, f"тЪая╕П **ржкрзЛрж╕рзНржЯрж╛рж░ рждрзИрж░рж┐рждрзЗ рж╕ржорж╕рзНржпрж╛:** `{error}`")

    preview_msg = await client.send_photo(cid, photo=poster, caption=caption, parse_mode=enums.ParseMode.MARKDOWN) if poster else await client.send_message(cid, caption, parse_mode=enums.ParseMode.MARKDOWN)
    
    channel_data = db_query("SELECT channel_id FROM users WHERE user_id=?", (uid,), 'one')
    if channel_data and channel_data[0]:
        await client.send_message(
            cid, "**ЁЯСЖ ржПржЯрж┐ ржПржХржЯрж┐ ржкрзНрж░рж┐ржнрж┐ржЙред**\nржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░ржмрзЗржи?",
            reply_to_message_id=preview_msg.id,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯУв рж╣рзНржпрж╛ржБ, ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рзБржи", callback_data=f"finalpost_{uid}")]]),
        )
    user_conversations[uid]['final_post'] = {'caption': caption, 'poster': poster}


@bot.on_callback_query(filters.regex("^finalpost_"))
async def post_to_channel_cb(client, cb: Message):
    uid = int(cb.data.split("_")[1])
    if cb.from_user.id != uid: return await cb.answer("This is not for you!", show_alert=True)
    
    convo = user_conversations.get(uid)
    channel_data = db_query("SELECT channel_id FROM users WHERE user_id=?", (uid,), 'one')
    if not convo or not channel_data or not channel_data[0]:
        return await cb.message.edit("тЭМ рж╕рзЗрж╢ржи ржмрж╛ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    channel_id, post_data = int(channel_data[0]), convo['final_post']
    
    try:
        if post_data['poster']: post_data['poster'].seek(0); await client.send_photo(channel_id, photo=post_data['poster'], caption=post_data['caption'], parse_mode=enums.ParseMode.MARKDOWN)
        else: await client.send_message(channel_id, post_data['caption'], parse_mode=enums.ParseMode.MARKDOWN)
        
        await cb.message.delete()
        if cb.message.reply_to_message: await cb.message.reply_to_message.delete()
        await client.send_message(cb.from_user.id, f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ `{channel_id}`-ржП ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!")
    except Exception as e:
        await cb.message.edit(f"тЭМ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
    finally:
        if uid in user_conversations: del user_conversations[uid]


@bot.on_message(filters.command("testpost") & filters.private)
@force_subscribe
async def test_post_command(client, message: Message):
    uid = message.from_user.id
    processing_msg = await message.reply_text("тП│ ржЖржкржирж╛рж░ рж╕рзЗржЯ ржХрж░рж╛ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржПржХржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ржорзВрж▓ржХ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    channel_data = db_query("SELECT channel_id FROM users WHERE user_id=?", (uid,), 'one')
    
    if not channel_data or not channel_data[0]:
        return await processing_msg.edit("тЭМ ржЖржкржирж╛рж░ ржХрзЛржирзЛ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржкрзНрж░ржержорзЗ `/setchannel <ID>` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")
    
    channel_id_str = channel_data[0]
    try: channel_id = int(channel_id_str)
    except ValueError: return await processing_msg.edit(f"тЭМ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ `{channel_id_str}` рж╕ржарж┐ржХ ржирзЯред ржПржЯрж┐ ржЕржмрж╢рзНржпржЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж╣рждрзЗ рж╣ржмрзЗред")

    try:
        await client.send_message(chat_id=channel_id, text="тЬЕ ржПржЯрж┐ ржмржЯ ржерзЗржХрзЗ ржкрж╛ржарж╛ржирзЛ ржПржХржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ржорзВрж▓ржХ ржмрж╛рж░рзНрждрж╛ред ржпржжрж┐ ржПржЗ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржжрзЗржЦрждрзЗ ржкрж╛ржи, рждрж╛рж░ ржорж╛ржирзЗ рж╕ржмржХрж┐ржЫрзБ ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗред")
        await processing_msg.edit(f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ `{channel_id}` ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрж░рзАржХрзНрж╖рж╛ржорзВрж▓ржХ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ!")
    except Exception as e:
        error_message = (f"тЭМ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже!\n\n"
                         f"**рждрзНрж░рзБржЯрж┐:**\n`{e}`\n\n"
                         f"**рж╕ржорзНржнрж╛ржмрзНржп ржХрж╛рж░ржг:**\n"
                         f"1. ржмржЯ ржХрж┐ ржПржЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи?\n"
                         f"2. ржмржЯрзЗрж░ ржХрж┐ 'Post Messages' ржЕржирзБржорждрж┐ ржЖржЫрзЗ?\n"
                         f"3. ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ (`{channel_id}`) ржХрж┐ рж╕ржарж┐ржХ?")
        await processing_msg.edit(error_message)


# ---- тЬи ржПржЦрж╛ржирзЗ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ тЬи ----
@bot.on_message(filters.command(["setwatermark", "setchannel", "cancel"]))
@force_subscribe
async def settings_commands(client, message: Message):
    command, uid = message.command[0].lower(), message.from_user.id
    if command == "setwatermark":
        text = " ".join(message.command[1:]) if len(message.command) > 1 else None
        # ржУрзЯрж╛ржЯрж╛рж░ржорж╛рж░рзНржХрзЗрж░ ржЬржирзНржпржУ Upsert ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржнрж╛рж▓рзЛ ржЕржнрзНржпрж╛рж╕
        db_query("INSERT INTO users (user_id, watermark_text) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET watermark_text = excluded.watermark_text", (uid, text))
        await message.reply_text(f"тЬЕ ржУрзЯрж╛ржЯрж╛рж░ржорж╛рж░рзНржХ {'рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗ: `' + text + '`' if text else 'ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред'}", parse_mode=enums.ParseMode.MARKDOWN)
    
    elif command == "setchannel":
        if len(message.command) > 1 and message.command[1].startswith("-100") and message.command[1][1:].isdigit():
            cid = message.command[1]
            # ---- ржкрзБрж░ржирзЛ UPDATE ржХрзЛрзЯрзЗрж░рж┐ржЯрж┐ ржирж┐ржЪрзЗрж░ Upsert ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ----
            db_query("INSERT INTO users (user_id, channel_id) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET channel_id = excluded.channel_id", (uid, cid))
            await message.reply_text(f"тЬЕ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗ: `{cid}`", parse_mode=enums.ParseMode.MARKDOWN)
        else: await message.reply_text("тЪая╕П ржЕржмрзИржз ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ред ржЖржЗржбрж┐ ржЕржмрж╢рзНржпржЗ `-100` ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣рждрзЗ рж╣ржмрзЗред")
    
    elif command == "cancel":
        if uid in user_conversations: del user_conversations[uid]; await message.reply_text("тЬЕ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        else: await message.reply_text("ЁЯЪл ржмрж╛рждрж┐рж▓ ржХрж░рж╛рж░ ржорждрзЛ ржХрзЛржирзЛ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржЪрж╛рж▓рзБ ржирзЗржЗред")

# ---- 5. START THE BOT ----
if __name__ == "__main__":
    print("ЁЯЪА Bot is starting...")
    bot.run()
    print("ЁЯСЛ Bot has stopped.")
