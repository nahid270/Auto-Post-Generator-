# -*- coding: utf-8 -*-

# ---- Core Python Imports ----
import os
import io
import re
import requests
import random
from threading import Thread

# --- Third-party Library Imports ---
from PIL import Image, ImageDraw, ImageFont
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from pyrogram.errors import UserNotParticipant
from flask import Flask
from dotenv import load_dotenv
import motor.motor_asyncio # тЬи MongoDB-рж░ ржЬржирзНржп

# ---- 1. CONFIGURATION AND SETUP ----
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")
FORCE_SUB_CHANNEL = os.getenv("FORCE_SUB_CHANNEL")
INVITE_LINK = os.getenv("INVITE_LINK")
JOIN_CHANNEL_TEXT = "ЁЯОм рж╕ржХрж▓ ржорзБржнрж┐ ржПржмржВ рж╕рж┐рж░рж┐ржЬрзЗрж░ ржЖржкржбрзЗржЯ ржкрзЗрждрзЗ"
JOIN_CHANNEL_LINK = "https://t.me/+60goZWp-FpkxNzVl" # ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж▓рж┐ржВржХ ржжрж┐ржи

# ---- тЬи MongoDB Database Setup тЬи ----
DB_URI = os.getenv("DATABASE_URI")
DB_NAME = os.getenv("DATABASE_NAME", "MovieBotDB")
if not DB_URI:
    print("CRITICAL: DATABASE_URI is not set. Bot cannot start without a database.")
    exit()
db_client = motor.motor_asyncio.AsyncIOMotorClient(DB_URI)
db = db_client[DB_NAME]
users_collection = db.users

# ---- Global Variables & Bot Initialization ----
user_conversations = {}
bot = Client("UltimateMovieBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ---- Flask App (for Keep-Alive) ----
app = Flask(__name__)
@app.route('/')
def home(): return "тЬЕ Bot is Running!"
Thread(target=lambda: app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080))), daemon=True).start()

# ---- 2. DECORATORS AND HELPER FUNCTIONS ----
async def add_user_to_db(user_id):
    await users_collection.update_one({'_id': user_id}, {'$setOnInsert': {'_id': user_id}}, upsert=True)

def force_subscribe(func):
    async def wrapper(client, message):
        if FORCE_SUB_CHANNEL:
            try:
                chat_id = int(FORCE_SUB_CHANNEL) if FORCE_SUB_CHANNEL.startswith("-100") else FORCE_SUB_CHANNEL
                await client.get_chat_member(chat_id, message.from_user.id)
            except UserNotParticipant:
                join_link = INVITE_LINK or f"https://t.me/{FORCE_SUB_CHANNEL.replace('@', '')}"
                return await message.reply_text("тЭЧ **ржПржЗ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржиред**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯСЙ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи", url=join_link)]]))
        await func(client, message)
    return wrapper

def format_runtime(minutes: int):
    if not minutes or not isinstance(minutes, int): return "N/A"
    hours, mins = divmod(minutes, 60)
    return f"{hours}h {mins}m" if hours > 0 else f"{mins}m"

# ---- 3. TMDB API & CONTENT GENERATION ----
def search_tmdb(query: str):
    year, name = None, query.strip()
    match = re.search(r'(.+?)\s*\(?(\d{4})\)?$', query)
    if match: name, year = match.group(1).strip(), match.group(2)
    url = f"https://api.themoviedb.org/3/search/multi?api_key={TMDB_API_KEY}&query={name}" + (f"&year={year}" if year else "")
    try:
        r = requests.get(url, timeout=10); r.raise_for_status()
        return [res for res in r.json().get("results", []) if res.get("media_type") in ["movie", "tv"]][:5]
    except Exception as e:
        print(f"TMDB Search Error: {e}"); return []

def get_tmdb_details(media_type: str, media_id: int):
    url = f"https://api.themoviedb.org/3/{media_type}/{media_id}?api_key={TMDB_API_KEY}&append_to_response=credits"
    try:
        r = requests.get(url, timeout=10); r.raise_for_status(); return r.json()
    except Exception as e:
        print(f"TMDB Details Error: {e}"); return None

def watermark_poster(poster_url: str, watermark_text: str):
    if not poster_url: return None, "Poster URL not found."
    try:
        img_data = requests.get(poster_url, timeout=20).content
        img = Image.open(io.BytesIO(img_data)).convert("RGBA")
        if watermark_text:
            draw = ImageDraw.Draw(img)
            font_size = int(img.width / 12)
            try:
                font = ImageFont.truetype("Poppins-Bold.ttf", font_size)
            except IOError:
                print("Poppins-Bold.ttf not found. Using default font.")
                font = ImageFont.load_default() # Fallback, not recommended
            
            thumbnail = img.resize((150, 150))
            colors = thumbnail.getcolors(150*150)
            if colors:
                dominant_color = sorted(colors, key=lambda x: x[0], reverse=True)[0][1]
                text_color = (255 - dominant_color[0], 255 - dominant_color[1], 255 - dominant_color[2], 230)
            else:
                text_color = (255, 255, 255, 230)

            bbox = draw.textbbox((0, 0), watermark_text, font=font)
            text_width, text_height = bbox[2] - bbox[0], bbox[3] - bbox[1]
            x = (img.width - text_width) / 2
            y = img.height - text_height - (img.height * 0.05)
            draw.text((x + 2, y + 2), watermark_text, font=font, fill=(0, 0, 0, 128))
            draw.text((x, y), watermark_text, font=font, fill=text_color)
            
        buffer = io.BytesIO(); buffer.name = "poster.png"
        img.save(buffer, "PNG"); buffer.seek(0)
        return buffer, None
    except requests.exceptions.RequestException as e: return None, f"Network Error: {e}"
    except Exception as e: return None, f"Image processing error. Error: {e}"

def generate_channel_caption(data: dict, language: str, links: dict):
    title = data.get("title") or data.get("name") or "N/A"
    year = (data.get("release_date") or data.get("first_air_date") or "----")[:4]
    genres = ", ".join([g["name"] for g in data.get("genres", [])[:3]]) or "N/A"
    rating = f"{data.get('vote_average', 0):.1f}/10"
    overview = data.get("overview", "ржХрж╛рж╣рж┐ржирзА рж╕ржВржХрзНрж╖рзЗржк ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    if len(overview) > 250: overview = overview[:250] + "..."
    cast = ", ".join([a['name'] for a in data.get('credits', {}).get('cast', [])[:3]]) or "N/A"
    
    caption_header = (f"тнРя╕П **рж░рзЗржЯрж┐ржВ:** {rating}\nЁЯОн **ржзрж░ржи:** {genres}\n"
                      f"ЁЯФК **ржнрж╛рж╖рж╛:** {language}\n")

    if 'first_air_date' in data: 
        runtime_list = data.get("episode_run_time", [])
        runtime = format_runtime(runtime_list[0] if runtime_list else 0)
        seasons = data.get("number_of_seasons", "N/A")
        caption_header = (f"ЁЯУ║ **{title} ({year})**\n\n" + caption_header +
                          f"ЁЯУК **ржорзЛржЯ рж╕рж┐ржЬржи:** {seasons}\n"
                          f"тП░ **ржкрзНрж░рждрж┐ ржкрж░рзНржмрзЗрж░ рж░рж╛ржиржЯрж╛ржЗржо:** {runtime}\n"
                          f"ЁЯСе **ржЕржнрж┐ржирзЯрзЗ:** {cast}\n\nЁЯУЭ **ржХрж╛рж╣рж┐ржирзА рж╕ржВржХрзНрж╖рзЗржк:** {overview}\n\n")
        
        link_section = "тЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦм\nЁЯУе **ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХрж╕ржорзВрж╣** ЁЯУе\nтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦм\n"
        if links:
            sorted_seasons = sorted(links.keys(), key=int)
            for season_num in sorted_seasons:
                link_section += f"тЬЕ **[рж╕рж┐ржЬржи {season_num} ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи]({links[season_num]})**\n"
    else:
        runtime = format_runtime(data.get("runtime", 0))
        caption_header = (f"ЁЯОм **{title} ({year})**\n\n" + caption_header +
                          f"тП░ **рж░рж╛ржиржЯрж╛ржЗржо:** {runtime}\n"
                          f"ЁЯСе **ржЕржнрж┐ржирзЯрзЗ:** {cast}\n\nЁЯУЭ **ржХрж╛рж╣рж┐ржирзА рж╕ржВржХрзНрж╖рзЗржк:** {overview}\n\n")
        
        link_section = "тЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦм\nЁЯУе **ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХрж╕ржорзВрж╣** ЁЯУе\nтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦм\n"
        if links.get("480p"): link_section += f"тЬЕ **[480p ржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб]({links['480p']})**\n"
        if links.get("720p"): link_section += f"тЬЕ **[720p ржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб]({links['720p']})**\n"
        if links.get("1080p"): link_section += f"тЬЕ **[1080p ржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб]({links['1080p']})**\n"

    caption = caption_header + link_section
    if JOIN_CHANNEL_TEXT and JOIN_CHANNEL_LINK:
        caption += f"\n---\n**ржЖржорж╛ржжрзЗрж░ ржЕржирзНржп ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи ЁЯСЗ**\n[ЁЯСЙ {JOIN_CHANNEL_TEXT}]({JOIN_CHANNEL_LINK})"
    return caption

# ---- 4. BOT HANDLERS ----
@bot.on_message(filters.command("start") & filters.private)
@force_subscribe
async def start_cmd(client, message: Message):
    await add_user_to_db(message.from_user.id)
    await message.reply_text("ЁЯСЛ **рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржорзБржнрж┐ ржУ рж╕рж┐рж░рж┐ржЬ ржкрзЛрж╕рзНржЯ ржЬрзЗржирж╛рж░рзЗржЯрж░ ржмржЯред**\n\n"
        "**ржЖржорж╛рж░ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ рж╣рж▓рзЛ:**\n"
        "ЁЯФ╣ `/post <name>` - ржорзБржнрж┐ ржмрж╛ рж╕рж┐рж░рж┐ржЬрзЗрж░ ржЬржирзНржп ржкрзЛрж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рзБржиред\n"
        "ЁЯФ╣ `/quickpost <name>` - ржжрзНрж░рзБржд ржкрзЛрж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рзБржи (рж╢рзБржзрзБ ржорзБржнрж┐рж░ ржЬржирзНржп)ред\n"
        "ЁЯФ╣ `/testpost` - ржЪрзНржпрж╛ржирзЗрж▓ рж╕ржВржпрзЛржЧ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред\n\n"
        "**рж╕рзЗржЯрж┐ржВрж╕:**\n"
        "ЁЯФ╣ `/setchannel <ID>` - ржкрзЛрж╕рзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржиред\n"
        "ЁЯФ╣ `/setwatermark <text>` - ржкрзЛрж╕рзНржЯрж╛рж░рзЗ ржЖржкржирж╛рж░ ржУрзЯрж╛ржЯрж╛рж░ржорж╛рж░рзНржХ рж╕рзЗржЯ ржХрж░рзБржиред\n"
        "ЁЯФ╣ `/cancel` - ржпрзЗржХрзЛржирзЛ ржЪрж▓ржорж╛ржи ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рзБржиред")

@bot.on_message(filters.command(["setwatermark", "setchannel", "cancel"]))
@force_subscribe
async def settings_commands(client, message: Message):
    command, uid = message.command[0].lower(), message.from_user.id
    await add_user_to_db(uid)

    if command == "setwatermark":
        text = " ".join(message.command[1:]) if len(message.command[1:]) > 0 else None
        await users_collection.update_one({'_id': uid}, {'$set': {'watermark_text': text}}, upsert=True)
        await message.reply_text(f"тЬЕ ржУрзЯрж╛ржЯрж╛рж░ржорж╛рж░рзНржХ {'рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗ: `' + text + '`' if text else 'ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред'}")
    
    elif command == "setchannel":
        if len(message.command) > 1 and message.command[1].startswith("-100") and message.command[1][1:].isdigit():
            cid = message.command[1]
            await users_collection.update_one({'_id': uid}, {'$set': {'channel_id': cid}}, upsert=True)
            await message.reply_text(f"тЬЕ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗ: `{cid}`")
        else:
            await message.reply_text("тЪая╕П ржЕржмрзИржз ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ред ржЖржЗржбрж┐ ржЕржмрж╢рзНржпржЗ `-100` ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣рждрзЗ рж╣ржмрзЗред")
            
    elif command == "cancel":
        if uid in user_conversations:
            del user_conversations[uid]
            await message.reply_text("тЬЕ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        else:
            await message.reply_text("ЁЯЪл ржмрж╛рждрж┐рж▓ ржХрж░рж╛рж░ ржорждрзЛ ржХрзЛржирзЛ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржЪрж╛рж▓рзБ ржирзЗржЗред")

async def generate_final_post_preview(client, uid, cid, msg):
    convo = user_conversations.get(uid)
    if not convo: return
    
    caption = generate_channel_caption(convo["details"], convo["language"], convo["links"])
    
    user_data = await users_collection.find_one({'_id': uid})
    watermark = user_data.get('watermark_text') if user_data else None
    
    poster_url = f"https://image.tmdb.org/t/p/w500{convo['details']['poster_path']}" if convo['details'].get('poster_path') else None
    
    await msg.edit_text("ЁЯЦ╝я╕П ржкрзЛрж╕рзНржЯрж╛рж░ рждрзИрж░рж┐ ржПржмржВ ржУрзЯрж╛ржЯрж╛рж░ржорж╛рж░рзНржХ ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    poster, error = watermark_poster(poster_url, watermark)
    
    await msg.delete()
    if error:
        await client.send_message(cid, f"тЪая╕П **ржкрзЛрж╕рзНржЯрж╛рж░ рждрзИрж░рж┐рждрзЗ рж╕ржорж╕рзНржпрж╛:** `{error}`")

    # Store a copy of the poster buffer in the conversation
    poster_buffer = None
    if poster:
        poster.seek(0)
        poster_buffer = io.BytesIO(poster.read())
        poster.seek(0) # Reset pointer for sending

    preview_msg = await client.send_photo(cid, photo=poster, caption=caption, parse_mode=enums.ParseMode.MARKDOWN) if poster else await client.send_message(cid, caption, parse_mode=enums.ParseMode.MARKDOWN)
    
    # Store the final post data for the channel posting callback
    user_conversations[uid]['final_post'] = {'caption': caption, 'poster': poster_buffer}

    # Only show the "Post to Channel" button if a channel is set
    channel_id = user_data.get('channel_id') if user_data else None
    if channel_id:
        await client.send_message(cid, "**ЁЯСЖ ржПржЯрж┐ ржПржХржЯрж┐ ржкрзНрж░рж┐ржнрж┐ржЙред**\nржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░ржмрзЗржи?",
            reply_to_message_id=preview_msg.id,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯУв рж╣рзНржпрж╛ржБ, ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рзБржи", callback_data=f"finalpost_{uid}")]]))

@bot.on_message(filters.command(["post", "blogger"]) & filters.private)
@force_subscribe
async def search_commands(client, message: Message):
    command = message.command[0].lower()
    if len(message.command) == 1:
        return await message.reply_text(f"**ржмрзНржпржмрж╣рж╛рж░:** `/{command} Movie or Series Name`")
    query = " ".join(message.command[1:])
    processing_msg = await message.reply_text(f"ЁЯФН `{query}`-ржПрж░ ржЬржирзНржп ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...")
    results = search_tmdb(query)
    if not results:
        return await processing_msg.edit_text("тЭМ ржХрзЛржирзЛ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    buttons = []
    for r in results:
        media_icon = 'ЁЯОм' if r['media_type'] == 'movie' else 'ЁЯУ║'
        title = r.get('title') or r.get('name')
        year = (r.get('release_date') or r.get('first_air_date') or '----').split('-')[0]
        buttons.append([InlineKeyboardButton(f"{media_icon} {title} ({year})", callback_data=f"select_{command}_{r['media_type']}_{r['id']}")])
    await processing_msg.edit_text("**ЁЯСЗ ржлрж▓рж╛ржлрж▓ ржерзЗржХрзЗ ржмрзЗржЫрзЗ ржирж┐ржи:**", reply_markup=InlineKeyboardMarkup(buttons))

@bot.on_message(filters.text & filters.private & ~filters.command(["start", "post", "blogger", "quickpost", "setwatermark", "setchannel", "cancel", "testpost"]))
@force_subscribe
async def conversation_handler(client, message: Message):
    uid, convo = message.from_user.id, user_conversations.get(message.from_user.id)
    if not convo or "state" not in convo: return
    state, text = convo["state"], message.text.strip()
    if state == "wait_movie_lang":
        convo["language"] = text; convo["state"] = "wait_480p"
        await message.reply_text("тЬЕ ржнрж╛рж╖рж╛ рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗред ржПржЦржи **480p** рж▓рж┐ржВржХ ржкрж╛ржарж╛ржи ржЕржержмрж╛ `skip` рж▓рж┐ржЦрзБржиред")
    elif state == "wait_480p":
        if text.lower() != 'skip': convo["links"]["480p"] = text
        convo["state"] = "wait_720p"
        await message.reply_text("тЬЕ ржарж┐ржХ ржЖржЫрзЗред ржПржЦржи **720p** рж▓рж┐ржВржХ ржкрж╛ржарж╛ржи ржЕржержмрж╛ `skip` рж▓рж┐ржЦрзБржиред")
    elif state == "wait_720p":
        if text.lower() != 'skip': convo["links"]["720p"] = text
        convo["state"] = "wait_1080p"
        await message.reply_text("тЬЕ ржУржХрзЗред ржПржЦржи **1080p** рж▓рж┐ржВржХ ржкрж╛ржарж╛ржи ржЕржержмрж╛ `skip` рж▓рж┐ржЦрзБржиред")
    elif state == "wait_1080p":
        if text.lower() != 'skip': convo["links"]["1080p"] = text
        msg = await message.reply_text("тЬЕ рждржерзНржп рж╕ржВржЧрзНрж░рж╣ рж╕ржорзНржкржирзНржи! ржкрзНрж░рж┐ржнрж┐ржЙ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
        await generate_final_post_preview(client, uid, message.chat.id, msg)
    elif state == "wait_tv_lang":
        convo["language"] = text
        convo["state"] = "wait_season_number"
        await message.reply_text("тЬЕ ржнрж╛рж╖рж╛ рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗред ржПржЦржи рж╕рж┐ржЬржирзЗрж░ ржиржорзНржмрж░ рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 1, 2 ржЗрждрзНржпрж╛ржжрж┐)ред")
    elif state == "wait_season_number":
        if text.lower() == 'done':
            if not convo.get('seasons'): return await message.reply_text("тЪая╕П ржЖржкржирж┐ ржХрзЛржирзЛ рж╕рж┐ржЬржирзЗрж░ рж▓рж┐ржВржХ ржпрзЛржЧ ржХрж░рзЗржиржирж┐ред")
            msg = await message.reply_text("тЬЕ рж╕ржХрж▓ рж╕рж┐ржЬржирзЗрж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣ рж╕ржорзНржкржирзНржи! ржкрзНрж░рж┐ржнрж┐ржЙ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
            convo['links'] = convo['seasons']
            await generate_final_post_preview(client, uid, message.chat.id, msg)
            return
        if not text.isdigit() or int(text) <= 0: return await message.reply_text("тЭМ ржнрзБрж▓ ржиржорзНржмрж░ред")
        convo['current_season'] = text
        convo['state'] = 'wait_season_link'
        await message.reply_text(f"ЁЯСН ржарж┐ржХ ржЖржЫрзЗред ржПржЦржи **рж╕рж┐ржЬржи {text}**-ржПрж░ ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХ ржкрж╛ржарж╛ржиред")
    elif state == "wait_season_link":
        season_num = convo.get('current_season')
        convo['seasons'][season_num] = text
        convo['state'] = 'wait_season_number'
        await message.reply_text(f"тЬЕ рж╕рж┐ржЬржи {season_num}-ржПрж░ рж▓рж┐ржВржХ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред\n\n**ЁЯСЙ ржкрж░ржмрж░рзНрждрзА рж╕рж┐ржЬржирзЗрж░ ржиржорзНржмрж░ рж▓рж┐ржЦрзБржи, ржЕржержмрж╛ ржкрзЛрж╕рзНржЯ рж╢рзЗрж╖ ржХрж░рждрзЗ `done` рж▓рж┐ржЦрзБржиред**")

@bot.on_callback_query(filters.regex("^select_"))
async def selection_cb(client, cb: CallbackQuery):
    await cb.answer("Fetching details...")
    try: _, flow, media_type, mid = cb.data.split("_", 3)
    except: return await cb.message.edit_text("Invalid callback.")
    details = get_tmdb_details(media_type, int(mid))
    if not details: return await cb.message.edit_text("тЭМ Failed to get details.")
    uid = cb.from_user.id
    user_conversations[uid] = {"flow": flow, "details": details, "links": {}, "state": ""}
    if flow == "blogger": return await cb.message.edit("Blogger flow not implemented.")
    if media_type == "tv":
        user_conversations[uid]["state"] = "wait_tv_lang"
        user_conversations[uid]['seasons'] = {}
        await cb.message.edit_text("**ржУрзЯрзЗржм рж╕рж┐рж░рж┐ржЬ ржкрзЛрж╕рзНржЯ:** рж╕рж┐рж░рж┐ржЬржЯрж┐рж░ ржЬржирзНржп ржнрж╛рж╖рж╛ рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: ржмрж╛ржВрж▓рж╛, ржЗржВрж░рзЗржЬрж┐)ред")
    elif media_type == "movie":
        user_conversations[uid]["state"] = "wait_movie_lang"
        await cb.message.edit_text("**ржорзБржнрж┐ ржкрзЛрж╕рзНржЯ:** ржорзБржнрж┐ржЯрж┐рж░ ржЬржирзНржп ржнрж╛рж╖рж╛ рж▓рж┐ржЦрзБржиред")

# ---- тнРя╕П рж╕ржорж╛ржзрж╛ржи: ржПржЗ ржирждрзБржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ржЯрж┐ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ тнРя╕П ----
@bot.on_callback_query(filters.regex("^finalpost_"))
async def post_to_channel_cb(client, cb: CallbackQuery):
    uid = cb.from_user.id
    
    # ржбрзЗржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ ржирж┐ржи
    user_data = await users_collection.find_one({'_id': uid})
    channel_id = user_data.get('channel_id') if user_data else None

    # рзз. ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи
    if not channel_id:
        await cb.answer("тЪая╕П ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ!", show_alert=True)
        return await cb.message.edit_text("ржЖржкржирж┐ ржПржЦржиржУ ржХрзЛржирзЛ ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзЗржЯ ржХрж░рзЗржиржирж┐ред `/setchannel <ID>` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")

    # рзи. ржХржерзЛржкржХржержирзЗрж░ ржбрзЗржЯрж╛ ┘Е┘И╪м┘И╪п ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи
    convo = user_conversations.get(uid)
    if not convo or 'final_post' not in convo:
        await cb.answer("тЭМ рж╕рзЗрж╢ржи рж╢рзЗрж╖ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ!", show_alert=True)
        return await cb.message.edit_text("ржжрзБржГржЦрж┐ржд, ржПржЗ ржкрзЛрж╕рзНржЯрзЗрж░ рждржерзНржп ржЖрж░ ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржиред")

    await cb.answer("тП│ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", show_alert=False)
    
    final_post = convo['final_post']
    caption = final_post['caption']
    poster = final_post['poster']

    # рзй. ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
    try:
        if poster:
            # ржкрзЛрж╕рзНржЯрж╛рж░ ржерж╛ржХрж▓рзЗ ржЫржмрж┐ рж╕рж╣ ржкрзЛрж╕рзНржЯ ржХрж░рзБржи
            poster.seek(0) # Ensure buffer is at the beginning
            await client.send_photo(
                chat_id=int(channel_id),
                photo=poster,
                caption=caption,
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            # ржкрзЛрж╕рзНржЯрж╛рж░ ржирж╛ ржерж╛ржХрж▓рзЗ рж╢рзБржзрзБ ржЯрзЗржХрзНрж╕ржЯ ржкрзЛрж╕рзНржЯ ржХрж░рзБржи
            await client.send_message(
                chat_id=int(channel_id),
                text=caption,
                parse_mode=enums.ParseMode.MARKDOWN
            )
        
        # рж╕ржлрж▓ рж╣рж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржЬрж╛ржирж╛ржи
        await cb.message.edit_text("тЬЕ **рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!**")

    except Exception as e:
        # ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ рждрзНрж░рзБржЯрж┐ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирж╛ржи
        error_message = (f"тЭМ **ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред**\n\n"
                         f"**рж╕ржорзНржнрж╛ржмрзНржп ржХрж╛рж░ржг:**\n"
                         f"1. ржмржЯ ржХрж┐ ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ (`{channel_id}`) рж╕ржжрж╕рзНржп?\n"
                         f"2. ржмржЯрзЗрж░ ржХрж┐ 'Post Messages' ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржЖржЫрзЗ?\n"
                         f"3. ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ ржХрж┐ рж╕ржарж┐ржХ?\n\n"
                         f"**Error:** `{e}`")
        await cb.message.edit_text(error_message)

    finally:
        # рзк. ржХрж╛ржЬ рж╢рзЗрж╖рзЗ ржХржерзЛржкржХржержирзЗрж░ ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи
        if uid in user_conversations:
            del user_conversations[uid]

# ---- 5. START THE BOT ----
if __name__ == "__main__":
    print("ЁЯЪА Bot is starting with MongoDB connection...")
    bot.run()
    print("ЁЯСЛ Bot has stopped.")
